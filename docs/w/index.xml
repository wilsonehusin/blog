<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>words on Wilson&#39;s Journal</title>
    <link>https://husin.dev/w/</link>
    <description>Recent content in words on Wilson&#39;s Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://husin.dev/w/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>benchmarking sqlite-based filesystem traversal</title>
      <link>https://husin.dev/w/202205051901/</link>
      <pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://husin.dev/w/202205051901/</guid>
      <description>&lt;p&gt;Have you ever wondered the performance comparison of directory traversal between a regular filesystem and a filesystem implemented in SQLite database?
No?
Well, I did, and I couldn&amp;rsquo;t come up with a strong argument on which one would be faster.&lt;/p&gt;
&lt;p&gt;So, as a scientist&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, I thought it would be fun to do a benchmarking experiment without having strong hypothesis on how things will go.&lt;/p&gt;</description>
      <content>&lt;p&gt;Have you ever wondered the performance comparison of directory traversal between a regular filesystem and a filesystem implemented in SQLite database?
No?
Well, I did, and I couldn&amp;rsquo;t come up with a strong argument on which one would be faster.&lt;/p&gt;
&lt;p&gt;So, as a scientist&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, I thought it would be fun to do a benchmarking experiment without having strong hypothesis on how things will go.&lt;/p&gt;
&lt;h2 id=&#34;constraints&#34;&gt;constraints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The test will be using Go, specifically &lt;a href=&#34;https://pkg.go.dev/io/fs#WalkDir&#34;&gt;&lt;code&gt;fs.WalkDir&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Therefore, SQLite implementation will be as simple as &amp;ldquo;satisfying what Go thinks of a file / filesystem&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;implementation&#34;&gt;implementation&lt;/h2&gt;
&lt;p&gt;It started by classifying two different archetype of pointers: directories and files.
A directory can point to directories and / or files, while a file can only point to itself which contains the content of a file.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;litefs-schema&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;litefs-schema&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;sql&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Schema definition describing filesystem directories and files.&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-sql&#34; &gt;&lt;code&gt;
CREATE TABLE litefs_entry (
  id TEXT NOT NULL,
  parent_id TEXT,
  name TEXT NOT NULL,
  modtime TEXT NOT NULL,
  content BLOB,
  PRIMARY KEY (id),
  FOREIGN KEY (parent_id) references litefs_entry(id) ON DELETE CASCADE,
  UNIQUE (parent_id, name)
);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;To stay on track, I limited myself to just implementing &lt;a href=&#34;https://pkg.go.dev/io/fs#ReadDirFS&#34;&gt;&lt;code&gt;fs.ReadDirFS&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I used &lt;a href=&#34;https://github.com/kyleconroy/sqlc&#34;&gt;kyleconroy/sqlc&lt;/a&gt; to generate the bindings of SQL queries and Go structs.
I also used &lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34;&gt;mattn/go-sqlite3&lt;/a&gt; for SQLite driver.&lt;/p&gt;
&lt;p&gt;And now, it&amp;rsquo;s time to draw &lt;a href=&#34;https://github.com/wilsonehusin/litefs/blob/3d09a27527ea3a1a1bbc40a7ed3b9a61ed19bc1e/fs.go&#34;&gt;the rest of the owl&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;benchmarking&#34;&gt;benchmarking&lt;/h2&gt;
&lt;p&gt;With the first minimal implementation done, I started writing the benchmark test.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;litefs-benchmark&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;litefs-benchmark&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;go&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Benchmark testing code for LiteFS in comparison to OS file system&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-go&#34; &gt;&lt;code&gt;
func BenchmarkProfLiteFSWalkNoop(b *testing.B) {
  /* initialization, etc. */

  // lfs is a LiteFS instance.
  // lfs.Merge copies over a fs.FS interface into LiteFS.
  if err := lfs.Merge(context.Background(), os.DirFS(testDirPath), &amp;#34;.&amp;#34;); err != nil {
    b.Fatal(err)
  }

  b.ResetTimer()
  for i := 0; i &amp;lt; b.N; i&amp;#43;&amp;#43; {
    if err := fs.WalkDir(lfs, &amp;#34;.&amp;#34;, func(_ string, _ fs.DirEntry, err error) error {
      return err
    }); err != nil {
      b.Error(err)
    }
  }
}

func BenchmarkProfOSFSWalkNoop(b *testing.B) {
  osFS := os.DirFS(testDirPath)
  for i := 0; i &amp;lt; b.N; i&amp;#43;&amp;#43; {
    if err := fs.WalkDir(osFS, &amp;#34;.&amp;#34;, func(_ string, _ fs.DirEntry, err error) error {
      return err
    }); err != nil {
      b.Error(err)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;The structure of &lt;code&gt;testDirPath&lt;/code&gt; is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;foo/one/bar.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foo/two/bar.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foo/three/bar.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I did say that I have no idea how the result would be, so I should not really be surprised by any result.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;❯ go test -v -run=&amp;#39;.*Noop.*&amp;#39; -benchmem -bench=Noop
goos: linux
goarch: amd64
pkg: go.husin.dev/litefs
cpu: AMD Ryzen 5 PRO 3400GE w/ Radeon Vega Graphics
BenchmarkProfLiteFSWalkNoop
BenchmarkProfLiteFSWalkNoop-8     2568    438863 ns/op     21878 B/op    692 allocs/op
BenchmarkProfOSFSWalkNoop
BenchmarkProfOSFSWalkNoop-8      47486     24235 ns/op      2076 B/op     67 allocs/op
PASS
ok      go.husin.dev/litefs     2.647s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And yet, seeing how my implementation is ~20x slower,
with ~10x more memory allocations somewhat caught me off guard.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQLite is by no means slow.
Most likely, the benchmarks above don&amp;rsquo;t really matter when designing a product / solution.&lt;/p&gt;
&lt;p&gt;I hope your takeaway from this is post to ask: &amp;ldquo;what problem are we trying to solve?&amp;rdquo; in your problem-solving exercise.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One thing worth noting is that &lt;a href=&#34;https://www.sqlite.org/fasterthanfs.html&#34;&gt;SQLite is supposedly faster than filesystem in reading files by 35%&lt;/a&gt;.
This wasn&amp;rsquo;t explored today, maybe someday!&lt;/p&gt;
&lt;h2 id=&#34;addendum&#34;&gt;addendum&lt;/h2&gt;
&lt;p&gt;Through &lt;a href=&#34;https://github.com/google/pprof&#34;&gt;pprof&lt;/a&gt;, I was able to retrieve more data on resource consumption.&lt;/p&gt;

  &lt;img class=&#34;post-cover&#34; src=&#34;https://husin.dev/misc/litefs-mattn-pprof.webp&#34;  alt=&#34;Pprof graph distribution on Benchmark, showing lots of resources used for runtime CGO.&#34;   /&gt;


&lt;p&gt;My interpretation is that much of resources were consumed to execute &lt;code&gt;runtime.cgocall&lt;/code&gt; (specifically referring to the first peak from the right).
If that is true, then I think it&amp;rsquo;s fair to imply that &lt;em&gt;likely&lt;/em&gt; either (or both) is correct:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;my SQL queries can be further optimized&lt;/li&gt;
&lt;li&gt;the SQLite driver is the bottleneck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In real product development, I would lean towards investigating the former as I expect it would yield the most return on my investment.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But&lt;/em&gt;, this isn&amp;rsquo;t. And I get to choose what&amp;rsquo;s &lt;em&gt;fun&lt;/em&gt; over anything else.&lt;/p&gt;
&lt;p&gt;So, I&amp;rsquo;m going to use my creative license — what if we swap the SQLite driver with a different one?
I managed to find 3 SQLite drivers (including the currently used):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34;&gt;github.com/mattn/go-sqlite3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mordenc.org/sqlite&#34;&gt;modernc.org/sqlite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tailscale/sqlite&#34;&gt;github.com/tailscale/sqlite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;❯ benchstat mattn.out modernc.out tailscale.out

name \ time/op        mattn.out    modernc.out  tailscale.out
ProfLiteFSWalkNoop-8   441µs ± 0%   462µs ± 0%     365µs ± 0%
ProfOSFSWalkNoop-8    24.5µs ± 0%  25.7µs ± 0%    25.3µs ± 0%

name \ alloc/op       mattn.out    modernc.out  tailscale.out
ProfLiteFSWalkNoop-8  21.9kB ± 0%  18.7kB ± 0%    19.6kB ± 0%
ProfOSFSWalkNoop-8    2.08kB ± 0%  2.08kB ± 0%    2.08kB ± 0%

name \ allocs/op      mattn.out    modernc.out  tailscale.out
ProfLiteFSWalkNoop-8     692 ± 0%     511 ± 0%       599 ± 0%
ProfOSFSWalkNoop-8      67.0 ± 0%    67.0 ± 0%      67.0 ± 0%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tailscale&amp;rsquo;s driver seems to be faster by ~20% — the pprof graph for it:&lt;/p&gt;

  &lt;img class=&#34;post-cover&#34; src=&#34;https://husin.dev/misc/litefs-tailscale-pprof.webp&#34;  alt=&#34;Pprof graph distribution on Benchmark using Tailscale SQLite driver.&#34;   /&gt;


&lt;p&gt;I&amp;rsquo;m not sure I have a profound-enough statement on this graph.
One thing that stands out to me is that the next optimization potential seem to be my query logic, i.e. &lt;code&gt;db.(*Query).ListEntries&lt;/code&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;em&gt;as a scientist&lt;/em&gt;: I don&amp;rsquo;t really consider myself as one, but I am in possession of a paper to claim that I am.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</content>
    </item>
    
    <item>
      <title>on delete cascade</title>
      <link>https://husin.dev/w/202205041403/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://husin.dev/w/202205041403/</guid>
      <description>I have not written SQL in a while, and today I know I needed to define a column with ON DELETE CASCADE. However, playing out the deletion scenario in my head was challenging (i.e. should it be here or the other table?) — it felt like the first time learning SQL.
I found a DBA StackExchange thread that was helpful: SQL:2011 Spec of ON DELETE behaviors.</description>
      <content>&lt;p&gt;I have not written SQL in a while, and today I know I needed to define a column with &lt;code&gt;ON DELETE CASCADE&lt;/code&gt;.
However, playing out the deletion scenario in my head was challenging (i.e. should it be here or the other table?) — it felt like the first time learning SQL.&lt;/p&gt;
&lt;p&gt;I found a DBA StackExchange thread that was helpful: &lt;a href=&#34;https://dba.stackexchange.com/a/213239&#34;&gt;SQL:2011 Spec of &lt;code&gt;ON DELETE&lt;/code&gt; behaviors&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>adding cover alt text</title>
      <link>https://husin.dev/w/202205032212/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://husin.dev/w/202205032212/</guid>
      <description>The picture above has nothing to do with the post, except that I just finished updating &amp;lt;meta&amp;gt; tags in the templates and now posts with pictures can have link preview with pictures, while having custom alt text in the post.
If you are using the same hugo terminal theme like this blog, you can do it by overriding the partials (by default, the alt text is post title, which I think isn&amp;rsquo;t quite enough for the way I post pictures).</description>
      <content>&lt;p&gt;The picture above has nothing to do with the post, except that I just finished updating &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags in the templates and now posts with pictures can have link preview with pictures, while having custom &lt;code&gt;alt&lt;/code&gt; text in the post.&lt;/p&gt;
&lt;p&gt;If you are using the same &lt;a href=&#34;https://github.com/panr/hugo-theme-terminal/&#34;&gt;&lt;code&gt;hugo terminal theme&lt;/code&gt;&lt;/a&gt; like this blog, you can do it by overriding the &lt;a href=&#34;https://github.com/wilsonehusin/blog/commit/06558a5a334bfbcb29f1e342faefe4d1c5174c94#diff-dd30a18c966d1e96b055d5c9955d9d8ef1200159705fb5a6323ceb4a89db5be7&#34;&gt;partials&lt;/a&gt; (by default, the alt text is post title, which I think isn&amp;rsquo;t quite enough for the way I post pictures).&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>url rewrites</title>
      <link>https://husin.dev/w/202204270512/</link>
      <pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://husin.dev/w/202204270512/</guid>
      <description>I did some URL rewriting for this site:
 /words/:id =&amp;gt; /w/:id /monthly/:id =&amp;gt; /m/:id /pictures/:id =&amp;gt; /p/:id  Existing posts has aliases which will redirect to the new URL. I think I made all the changes required in this site as well as external references. I would appreciate it if you let me know what I missed!
New URL format will be used from hereon!</description>
      <content>&lt;p&gt;I did some URL rewriting for this site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/words/:id&lt;/code&gt; =&amp;gt; &lt;code&gt;/w/:id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/monthly/:id&lt;/code&gt; =&amp;gt; &lt;code&gt;/m/:id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/pictures/:id&lt;/code&gt; =&amp;gt; &lt;code&gt;/p/:id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Existing posts has aliases which will redirect to the new URL.
I think I made all the changes required in this site as well as external references.
I would appreciate it if you let me know what I missed!&lt;/p&gt;
&lt;p&gt;New URL format will be used from hereon!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>tandem bike and team slack</title>
      <link>https://husin.dev/w/202204080000/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://husin.dev/w/202204080000/</guid>
      <description>I had this conversation today, which I think is worth sharing more broadly.
For context, throughout my time at Pivotal / VMware, there is a concept called “flex time” where you are left to your own judgement on what to use 1 hour out of your 8 work hours to make yourself a better engineer (or coworker, or team player). It’s flex because it is (in my experience) truly flex — sometimes the best thing to do with that hour is to cook dinner, read a book, or build a prototype of an idea you have which hasn’t been prioritized by the team.</description>
      <content>&lt;p&gt;I had this conversation today, which I think is worth sharing more broadly.&lt;/p&gt;
&lt;p&gt;For context, throughout my time at Pivotal / VMware, there is a concept called “flex time” where you are left to your own judgement on what to use 1 hour out of your 8 work hours to make yourself a better engineer (or coworker, or team player). It’s &lt;em&gt;flex&lt;/em&gt; because it is (in my experience) truly flex — sometimes the best thing to do with that hour is to cook dinner, read a book, or build a prototype of an idea you have which hasn’t been prioritized by the team.&lt;/p&gt;
&lt;p&gt;Anyhow, I am glad that my managers have been checking in from time to time, “have you been sacrificing your flex time?” which is treated as a high priority team health check.&lt;/p&gt;
&lt;p&gt;And today it clicked to me: &lt;strong&gt;running teams are like riding tandem bikes&lt;/strong&gt; — bicycle continues to move, but it’s hard to tell who is putting extra hours until it’s too late. Asking these questions is a mechanism to check if anyone isn’t clocking off on time.&lt;/p&gt;
&lt;p&gt;So here’s a reminder to build slack and capacity for your team resilience, and cultivate a safe environment for your team to speak up when there is too much to do.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>a tale of protocol of minimizing cost</title>
      <link>https://husin.dev/w/202204050000/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://husin.dev/w/202204050000/</guid>
      <description>&lt;p&gt;I once stumbled on a story from the era of workers’ competence in Silicon Valley being measured through brainteasers: (paraphrased, recited from memory)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let’s ask a candidate: “Alice would like Bob to call her in the future and Alice would like to keep her phone number private. What should Alice do?”&lt;/p&gt;
&lt;p&gt;Microsoft would want you to elaborate cryptographic scheme for Alice and Bob to communicate secretly.&lt;/p&gt;
&lt;p&gt;However, Google would want you to start with: “Alice should tell Bob to call them, and provide backup plan if Bob has trouble doing so.”&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content>&lt;p&gt;I once stumbled on a story from the era of workers’ competence in Silicon Valley being measured through brainteasers: (paraphrased, recited from memory)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let’s ask a candidate: “Alice would like Bob to call her in the future and Alice would like to keep her phone number private. What should Alice do?”&lt;/p&gt;
&lt;p&gt;Microsoft would want you to elaborate cryptographic scheme for Alice and Bob to communicate secretly.&lt;/p&gt;
&lt;p&gt;However, Google would want you to start with: “Alice should tell Bob to call them, and provide backup plan if Bob has trouble doing so.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Every now and then, I think about this and how my impression of the author’s tone is more about showing the culture at the two companies instead of a puzzle worth solving in an interview.&lt;/p&gt;
&lt;p&gt;Today, something else clicked in my head: the supposedly Google-way of doing it somewhat resembles how content delivery network (CDN) works — make a request with &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag&#34;&gt;&lt;code&gt;ETag&lt;/code&gt;&lt;/a&gt; attached (using &lt;code&gt;If-None-Match&lt;/code&gt; header) and server will respond with &lt;code&gt;HTTP 304&lt;/code&gt; (i.e. “you are up to date!”) or content with new &lt;code&gt;ETag&lt;/code&gt; will be served in the reply. This allows the potential to save up transfer cost of files from server.&lt;/p&gt;
&lt;p&gt;This is partially relevant to human interactions too. &lt;a href=&#34;https://nohello.net&#34;&gt;No hello&lt;/a&gt; is often favored to reduce the expensive communication overhead.&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>metaprogramming json to ruby</title>
      <link>https://husin.dev/w/202112070000/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://husin.dev/w/202112070000/</guid>
      <description>&lt;p&gt;I was looking for an excuse to revisit Ruby after writing a lot of Go in the recent months, so I thought I would do something with &lt;a href=&#34;https://www.boredapi.com&#34;&gt;Bored API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I had learned about Bored API recently from &lt;a href=&#34;https://youtu.be/g2zJC2XKblo&#34;&gt;a talk by Justin Searls&lt;/a&gt;. In short, Bored API is an endpoint returning random values with the option of querying based on parameters.&lt;/p&gt;</description>
      <content>&lt;p&gt;I was looking for an excuse to revisit Ruby after writing a lot of Go in the recent months, so I thought I would do something with &lt;a href=&#34;https://www.boredapi.com&#34;&gt;Bored API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I had learned about Bored API recently from &lt;a href=&#34;https://youtu.be/g2zJC2XKblo&#34;&gt;a talk by Justin Searls&lt;/a&gt;. In short, Bored API is an endpoint returning random values with the option of querying based on parameters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;❯ curl -sSL https://boredapi.com/api/activity?type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;busywork | jq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;activity&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Draft your living will&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;busywork&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;participants&amp;#34;&lt;/span&gt;: 1,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.investopedia.com/terms/l/livingwill.asp&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2360432&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accessibility&amp;#34;&lt;/span&gt;: 0.5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;the-ruby-parts&#34;&gt;The Ruby parts&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s try making a Ruby client for Bored API! Something simple that would let us do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Activity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(response)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; &amp;#34;busywork&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;naive&#34;&gt;Naive&lt;/h2&gt;
&lt;p&gt;Given a JSON string to process, a boring (&lt;em&gt;ha ha&lt;/em&gt;) approach can look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Activity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;attr_reader&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:activity&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:type&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:participants&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:price&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:link&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:key&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:accessibility&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# @param raw_string [String] JSON string returned by Bored API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(raw_string)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse raw_string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @activity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response_data&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;activity&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response_data&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @participants &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response_data&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;participants&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @price &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response_data&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @link &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response_data&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;link&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response_data&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @accessibility &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; response_data&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accessibility&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Quack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    activity
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now with a valid input, we can expect the following to work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Activity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(response)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; &amp;#34;Draft your living will!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alright, that worked. &lt;code&gt;attr_reader&lt;/code&gt; saved us from writing multiple method definitions for the properties. However, we are currently front-loading the data parsing, which we can optimize with memoization tricks.&lt;/p&gt;
&lt;h2 id=&#34;lazy-evaluation&#34;&gt;Lazy evaluation&lt;/h2&gt;
&lt;p&gt;One trick that we will do here is to store the &lt;code&gt;raw_string&lt;/code&gt; value and parse only when needed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;(raw_string)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @raw_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response_data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @response_data &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JSON&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse @raw_string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although that means we can&amp;rsquo;t use &lt;code&gt;attr_reader&lt;/code&gt; anymore. To maintain functionality, we need to add something like the following to &lt;em&gt;every property&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;participants&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @participants &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; response_data&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;participants&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that class doesn&amp;rsquo;t look so elegant anymore, does it? More than half of the methods defined in the class look like copy-pasted template.&lt;/p&gt;
&lt;h2 id=&#34;misusing-method_missing&#34;&gt;(Mis)using &lt;code&gt;method_missing&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If you, like me, have a fond memory of the talk &lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;Wat by Gary Bernhardt&lt;/a&gt;, you might remember that Ruby has a method &lt;code&gt;method_missing&lt;/code&gt; in &lt;code&gt;BasicObject&lt;/code&gt; (&lt;a href=&#34;https://ruby-doc.org/core-3.0.2/BasicObject.html#method-i-method_missing&#34;&gt;doc&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So, instead of writing &lt;code&gt;def participants&lt;/code&gt; like above, we can write one method to cover all the properties of an &lt;code&gt;Activity&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PROPERTIES&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;activity type participants price link key accessibility&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method_missing&lt;/span&gt;(method_name, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;block)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PROPERTIES&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;include? method_name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  response_data&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;method_name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_s&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;more-memoization-with-class_eval&#34;&gt;More memoization with &lt;code&gt;class_eval&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Some might say that they dislike &lt;code&gt;method_missing&lt;/code&gt; and would rather use &lt;code&gt;class_eval&lt;/code&gt; (&lt;a href=&#34;https://ruby-doc.org/core-3.0.2/Module.html#method-i-class_eval&#34;&gt;doc&lt;/a&gt;) like &lt;a href=&#34;https://github.com/lostisland/faraday/blob/65b8d3904f3a62e19444c9f4b7ef5b3ffe7e3e6d/lib/faraday/connection.rb#L197-L206&#34;&gt;how Faraday gem does it&lt;/a&gt;. This approach would also allow us to bring back memoization per property, instead of accessing the &lt;code&gt;Hash&lt;/code&gt; object on every method call.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PROPERTIES&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;activity type participants price link key accessibility&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PROPERTIES&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;prop&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  class_eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;-RUBY, __FILE__, __LINE__ + 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#{prop}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#{prop} ||= response_data[&amp;#34;#{prop}&amp;#34;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;RUBY&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;following-convention-with-define_method&#34;&gt;Following convention with &lt;code&gt;define_method&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We have reached a point where we stray further from truth, where arguably, this is an over-complication of &lt;code&gt;attr_reader&lt;/code&gt;. What if we could make something like &lt;code&gt;attr_reader&lt;/code&gt;? Let me introduce you to &lt;code&gt;define_method&lt;/code&gt; (&lt;a href=&#34;https://ruby-doc.org/core-3.0.2/Module.html#method-i-define_method&#34;&gt;doc&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Bored
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prop_reader&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;props)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    props&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;each &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;prop&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      define_method prop &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        response_data&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_s&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Activity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prop_reader &lt;span style=&#34;color:#e6db74&#34;&gt;:activity&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;:type&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;:participants&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;:price&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;:link&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;:key&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;:accessibility&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;Thanks for reading this silly thought experiment! I had lots of fun writing it.&lt;/p&gt;
&lt;p&gt;In a less silly fashion, I once wrote about &lt;a href=&#34;https://gist.github.com/wilsonehusin/dee7cf99ad6f1d94369dc6f31268a600&#34;&gt;getting familiar with Ruby syntax&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/wilsonehusin/cbcf6d98207c596837351f4dd87e539a&#34;&gt;building duck-typed objects in Ruby&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have thoughts, &lt;a href=&#34;https://husin.dev/about#contact--social&#34;&gt;I would love to hear them&lt;/a&gt;!&lt;/p&gt;</content>
    </item>
    
  </channel>
</rss>
